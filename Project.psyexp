<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="(1024, 768)" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Project" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <PolygonComponent name="polygon">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="exp">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="number_1 = 0;&amp;#10;number_2 = 0;&amp;#10;while ((number_1 === number_2)) {&amp;#10;    number_1 = util.randint(1, 9);&amp;#10;    number_2 = util.randint(1, 9);&amp;#10;}&amp;#10;if ((number_1 &gt; number_2)) {&amp;#10;    corr = &quot;left&quot;;&amp;#10;} else {&amp;#10;    corr = &quot;right&quot;;&amp;#10;}&amp;#10;numbers = [];&amp;#10;if ((Math.random() &gt; 0.5)) {&amp;#10;    num_1_size = 0.4;&amp;#10;    num_2_size = 0.1;&amp;#10;} else {&amp;#10;    num_2_size = 0.4;&amp;#10;    num_1_size = 0.1;&amp;#10;}&amp;#10;num_1 = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;num_stim&quot;, &quot;text&quot;: number_1, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [(- 0.6), 0], &quot;height&quot;: num_1_size, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;num_2 = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;num_stim&quot;, &quot;text&quot;: number_2, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [0.6, 0], &quot;height&quot;: num_2_size, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;numbers.push(num_1);&amp;#10;numbers.push(num_2);&amp;#10;for (var num, _pj_c = 0, _pj_a = numbers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    num.setAutoDraw(true);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="number_1=0&amp;#10;number_2=0&amp;#10;&amp;#10;while(number_1==number_2):&amp;#10;    number_1 = randint(1,9)&amp;#10;    number_2 = randint(1,9)&amp;#10;if number_1 &gt; number_2:&amp;#10;    corr = 'left'&amp;#10;else:&amp;#10;    corr = 'right'&amp;#10;numbers = []&amp;#10;&amp;#10;if random()&gt;0.5:&amp;#10;    num_1_size = 0.4&amp;#10;    num_2_size = 0.1&amp;#10;else:&amp;#10;    num_2_size = 0.4&amp;#10;    num_1_size = 0.1&amp;#10;num_1 = visual.TextStim(win=win, name='num_stim',&amp;#10;    text=number_1,&amp;#10;    font='Open Sans',&amp;#10;    pos=(-0.6, 0), height=num_1_size, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;    &amp;#10;num_2 = visual.TextStim(win=win, name='num_stim',&amp;#10;    text=number_2,&amp;#10;    font='Open Sans',&amp;#10;    pos=(0.6, 0), height=num_2_size, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;    &amp;#10;numbers.append(num_1)&amp;#10;numbers.append(num_2)&amp;#10;    &amp;#10;for num in numbers:&amp;#10;    num.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var num, _pj_c = 0, _pj_a = numbers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    num.setAutoDraw(false);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="for num in numbers:&amp;#10;    num.setAutoDraw(False)&amp;#10;  " valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corr" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="exp_2">
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="number_1 = 0;&amp;#10;number_2 = 0;&amp;#10;numbers = [];&amp;#10;colors = [&quot;black&quot;, &quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;];&amp;#10;while ((number_1 === number_2)) {&amp;#10;    number_1 = util.randint(1, 9);&amp;#10;    number_2 = util.randint(1, 9);&amp;#10;}&amp;#10;if ((number_1 &gt; number_2)) {&amp;#10;    color_1 = colors[util.randint(colors.length)];&amp;#10;    color_2 = &quot;white&quot;;&amp;#10;    corr = &quot;left&quot;;&amp;#10;} else {&amp;#10;    color_1 = &quot;white&quot;;&amp;#10;    color_2 = colors[util.randint(colors.length)];&amp;#10;    corr = &quot;right&quot;;&amp;#10;}&amp;#10;if ((Math.random() &gt; 0.5)) {&amp;#10;    num_1_size = 0.4;&amp;#10;    num_2_size = 0.1;&amp;#10;} else {&amp;#10;    num_2_size = 0.4;&amp;#10;    num_1_size = 0.1;&amp;#10;}&amp;#10;num_1 = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;num_stim&quot;, &quot;text&quot;: number_1, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [(- 0.6), 0], &quot;height&quot;: num_1_size, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: color_1, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;num_2 = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;num_stim&quot;, &quot;text&quot;: number_2, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [0.6, 0], &quot;height&quot;: num_2_size, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: color_2, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;numbers.push(num_1);&amp;#10;numbers.push(num_2);&amp;#10;for (var num, _pj_c = 0, _pj_a = numbers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    num.setAutoDraw(true);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="number_1 = 0&amp;#10;number_2 = 0&amp;#10;numbers = []&amp;#10;colors = ['black', 'red', 'green', 'yellow']&amp;#10;while(number_1==number_2):&amp;#10;    number_1 = randint(1,9)&amp;#10;    number_2 = randint(1,9)&amp;#10;if number_1 &gt; number_2:&amp;#10;    color_1 = colors[randint(len(colors))]&amp;#10;    color_2 = 'white'&amp;#10;    corr = 'left'&amp;#10;else:&amp;#10;    color_1 = 'white'&amp;#10;    color_2 = colors[randint(len(colors))]&amp;#10;    corr = 'right'&amp;#10;&amp;#10;if random()&gt;0.5:&amp;#10;    num_1_size = 0.4&amp;#10;    num_2_size = 0.1&amp;#10;else:&amp;#10;    num_2_size = 0.4&amp;#10;    num_1_size = 0.1&amp;#10;num_1 = visual.TextStim(win=win, name='num_stim',&amp;#10;    text=number_1,&amp;#10;    font='Open Sans',&amp;#10;    pos=(-0.6, 0), height=num_1_size, wrapWidth=None, ori=0, &amp;#10;    color=color_1, colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;    &amp;#10;num_2 = visual.TextStim(win=win, name='num_stim',&amp;#10;    text=number_2,&amp;#10;    font='Open Sans',&amp;#10;    pos=(0.6, 0), height=num_2_size, wrapWidth=None, ori=0, &amp;#10;    color=color_2, colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;    &amp;#10;numbers.append(num_1)&amp;#10;numbers.append(num_2)&amp;#10;    &amp;#10;for num in numbers:&amp;#10;    num.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var num, _pj_c = 0, _pj_a = numbers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    num.setAutoDraw(false);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="for num in numbers:&amp;#10;    num.setAutoDraw(False)&amp;#10;  " valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_2">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corr" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="exp_3">
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="number_1 = 0;&amp;#10;number_2 = 0;&amp;#10;while ((number_1 === number_2)) {&amp;#10;    number_1 = util.randint(1, 9);&amp;#10;    number_2 = util.randint(1, 9);&amp;#10;}&amp;#10;numbers = [];&amp;#10;if ((number_1 &gt; number_2)) {&amp;#10;    color_1 = &quot;white&quot;;&amp;#10;    color_2 = &quot;white&quot;;&amp;#10;    pos = [(- 0.6), 0.2];&amp;#10;    corr = &quot;left&quot;;&amp;#10;} else {&amp;#10;    color_1 = &quot;white&quot;;&amp;#10;    color_2 = &quot;white&quot;;&amp;#10;    pos = [0.6, 0.2];&amp;#10;    corr = &quot;left&quot;;&amp;#10;}&amp;#10;if ((Math.random() &gt; 0.5)) {&amp;#10;    num_1_size = 0.4;&amp;#10;    num_2_size = 0.1;&amp;#10;} else {&amp;#10;    num_2_size = 0.4;&amp;#10;    num_1_size = 0.1;&amp;#10;}&amp;#10;num_1 = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;num_stim&quot;, &quot;text&quot;: number_1, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [(- 0.6), 0], &quot;height&quot;: num_1_size, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: color_1, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;num_2 = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;num_stim&quot;, &quot;text&quot;: number_2, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [0.6, 0], &quot;height&quot;: num_2_size, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: color_2, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;tri = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;pos&quot;: pos, &quot;size&quot;: [0.03, 0.03], &quot;fillColor&quot;: [1, 1, 1], &quot;lineColor&quot;: [(- 1), (- 1), (- 1)], &quot;vertices&quot;: &quot;rectangle&quot;});&amp;#10;numbers.push(num_1);&amp;#10;numbers.push(num_2);&amp;#10;numbers.push(tri);&amp;#10;for (var num, _pj_c = 0, _pj_a = numbers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    num.setAutoDraw(true);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="number_1 = 0&amp;#10;number_2 = 0&amp;#10;while(number_1==number_2):&amp;#10;    number_1 = randint(1,9)&amp;#10;    number_2 = randint(1,9)&amp;#10;numbers = []&amp;#10;&amp;#10;if number_1 &gt; number_2:&amp;#10;    color_1 = 'white'&amp;#10;    color_2 = 'white'&amp;#10;    pos = (-0.6, 0.2)&amp;#10;    corr = 'left'&amp;#10;else:&amp;#10;    color_1 = 'white'&amp;#10;    color_2 = 'white'&amp;#10;    pos = (0.6, 0.2)&amp;#10;    corr = 'left'&amp;#10;&amp;#10;if random()&gt;0.5:&amp;#10;    num_1_size = 0.4&amp;#10;    num_2_size = 0.1&amp;#10;else:&amp;#10;    num_2_size = 0.4&amp;#10;    num_1_size = 0.1&amp;#10;num_1 = visual.TextStim(win=win, name='num_stim',&amp;#10;    text=number_1,&amp;#10;    font='Open Sans',&amp;#10;    pos=(-0.6, 0), height=num_1_size, wrapWidth=None, ori=0, &amp;#10;    color=color_1, colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;    &amp;#10;num_2 = visual.TextStim(win=win, name='num_stim',&amp;#10;    text=number_2,&amp;#10;    font='Open Sans',&amp;#10;    pos=(0.6, 0), height=num_2_size, wrapWidth=None, ori=0, &amp;#10;    color=color_2, colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;tri = visual.ShapeStim(win=win, pos=pos, size=(0.03, 0.03), fillColor=[1, 1, 1], lineColor=[-1, -1, -1], vertices='rectangle')&amp;#10;numbers.append(num_1)&amp;#10;numbers.append(num_2)&amp;#10;numbers.append(tri)&amp;#10;for num in numbers:&amp;#10;    num.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var num, _pj_c = 0, _pj_a = numbers, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    num.setAutoDraw(false);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="for num in numbers:&amp;#10;    num.setAutoDraw(False)&amp;#10;  " valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_3">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corr" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instructions">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In the beginning, a fixation(plus sign) will appear before the trials start.&amp;#10;&amp;#10;The first trial will be about locating the numerically larger number on the screen.&amp;#10;&amp;#10;In the second trial, a colour based cue will be provided for the same task.&amp;#10;&amp;#10;In the third trial, a location based cue will be provided.&amp;#10;&amp;#10;*Click to start*" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_4">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_4" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Instructions"/>
    <Routine name="trial"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="exp"/>
    <LoopTerminator name="trials"/>
    <Routine name="trial"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="exp_2"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="trial"/>
    <LoopInitiator loopType="TrialHandler" name="trials_4">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials_4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="exp_3"/>
    <LoopTerminator name="trials_4"/>
  </Flow>
</PsychoPy2experiment>
